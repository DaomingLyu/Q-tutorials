# source: http://cs12-0.dev.corp.maana.io:8003/graphql
# timestamp: Wed Apr 11 2018 06:22:00 GMT-0700 (PDT)

input AddApplicationInput {
  id: ID!
  name: String!
  thumbnailUrl: String
}

input AddDocumentInput {
  id: ID

  name: String
  text: String
}

input AddEntitiesInput {
  docId: ID!
  entities: [EntityInput!]!
}

input AddFieldsInput {
  kindId: ID!
  fields: [FieldInput!]!
}

input AddFileInput {
  id: ID

  name: String
  url: String
  thumbnailUrl: String
  mimeType: String
  size: String
  progress: String
  status: Int!
}

input AddImageInput {
  id: ID

  name: String
  url: String
}

input AddInstanceInput {
  kindId: ID!
  id: ID
  fieldIds: [ID]!
  fieldValues: [FieldValueInput]!
}

input AddInstanceSetInput {
  kindId: ID!
  ids: [ID]
  fieldIds: [ID]!
  records: [[FieldValueInput]]!
}

input AddKindInput {
  id: ID
  name: String!
  description: String
  serviceId: ID
  thumbnailUrl: String
  isPublic: Boolean
  nameField: String
  isManaged: Boolean
  schema: [FieldInput]
}

input AddKnowledgeGraphInput {
  workspaceId: ID!
  name: String!
}

input AddLinkInput {
  fromKindId: ID
  fromKindName: String

  toKindId: ID
  toKindName: String

  relationId: ID
  relationName: String

  id: ID
  name: String
  weight: Float
  fromFieldId: ID
  fromFieldName: String
  fromInstanceId: ID
  fromOffset: String
  fromSpan: String
  toFieldId: ID
  toFieldName: String
  toInstanceId: ID
  toOffset: String
  toSpan: String
}

input AddPersonInput {
  id: ID

  name: String
  givenName: String
  familyName: String
  dateOfBirth: DateTime
}

input AddQueryGraphInput {
  workspaceId: ID!
  name: String!
  nodes: [AddQueryGraphNodeInput!]
}

input AddQueryGraphNodeInput {
  id: ID

  kindId: ID!

  fieldFilters: [QueryGraphFieldFilterInput!]

  children: [QueryGraphNodeConnectionInput!]
}

input AddRelationInput {
  name: String!

  id: ID
  inverseName: String
  description: String
  undirected: Boolean
  weight: Float
}

input AddRoleInput {
  id: ID
  name: String!
}

input AddServiceInput {
  id: ID
  name: String!
  isSystem: Boolean!
  thumbnailUrl: String!
  endpointUrl: String!
  subscriptionEndpointUrl: String!
  tags: [String]
  kinds: [KindInput]
  queries: [ServiceQueryInput]
  mutations: [ServiceMutationInput]
  subscriptions: [ServiceSubscriptionInput]
}

input AddServiceSourceInput {
  id: ID
  name: String
  description: String

  schema: String!
}

input AddTenantInput {
  id: ID
  name: String!
}

input AddTenantUserRoleInput {
  userId: ID!
  tenantId: ID!
  roleIds: [ID!]
}

input AddTextElementInput {
  id: ID
  name: String!
  docId: ID!
  pageNum: Int
  dir: String
  width: Float
  height: Float
  transform: [Float]
  fontName: String
}

input AddUserInput {
  id: ID
  name: String!
  givenName: String
  familyName: String
  email: String
  picture: String
  theme: Theme!
  createdOn: DateTime
}

input AddWorkspaceInput {
  userId: ID!
  name: String!
  thumbnailUrl: String!
}

type Application {
  id: ID!
  name: String!
  thumbnailUrl: String
}

type BooleanKind {
  id: ID!
  value: Boolean!
}

type Categorical {
  id: ID!
  name: String!
}

type Comment {
  id: ID!
  name: String!
  detail: String
  author: User!
  timestamp: DateTime!
}

type CountryCode {
  id: ID!
  name: String!
}

type Currency {
  id: ID!
  name: String!
}

type DateKind {
  id: ID!
  name: String!
}

scalar DateTime

input DeleteInstanceInput {
  kindId: ID!
  id: ID!
}

input DeleteInstanceSetInput {
  kindId: ID!
  ids: [ID!]!
}

type DetectedFace {
  id: ID!
  name: String

  image: Image!

  area: Int!
  bottom: Int!
  top: Int!
  right: Int!
  left: Int!

  detectionConfidence: Float!
}

input DetectedFaceInput {
  id: ID
  name: String
  imageId: ID!
  area: Int!
  bottom: Int!
  top: Int!
  right: Int!
  left: Int!
  detectionConfidence: Float!
}

type DocFile {
  id: ID!
  name: String!
}

type Document {
  id: ID!
  name: String!

  text: String
  textElements: [TextElement]
  entities: [Entity]
}

type DocumentAddedEvent {
  id: ID!
  name: String!
}

type DocumentDeletedEvent {
  id: ID!
  name: String!

  text: String
}

type DocumentUpdatedEvent {
  id: ID!
  name: String!
}

type Email {
  id: ID!
  name: String!
}

type Entity {
  id: ID!
  name: String!
  class: String!
  count: Int
  percent: Float
}

input EntityInput {
  id: ID
  name: String
  class: String
  count: Int
  percent: Float
}

type FaceDetectedEvent {
  id: ID!
  name: String!
  area: Int!
  bottom: Int!
  top: Int!
  right: Int!
  left: Int!
  detectionConfidence: Float!
}

type FaceRecognizedEvent {
  id: ID
  name: String!
  personId: ID!
  detectedFaceId: ID!
  recognitionConfidence: Float!
}

type Field {
  id: ID!
  name: String!
  type: FieldType!

  description: String
  modifiers: [FieldModifiers]
  typeKindId: ID

  displayAs: [String]
  hide: Boolean
  autoFocus: Boolean
  readonly: Boolean

  kind: Kind
  acceptedFieldClassification: FieldClassification
  fieldClassifications: [FieldClassification]
}

type FieldClassification {
  id: ID!
  fieldId: ID!
  name: String!
  score: Float!
}

input FieldClassificationInput {
  id: ID
  fieldId: ID!
  name: String!
  score: Float!
}

type FieldFilter {
  id: ID!
  fieldId: ID!
  op: String!
  value: FieldValue
}

input FieldFilterInput {
  fieldId: ID
  fieldName: String
  op: String!
  value: FieldValueInput!
}

input FieldInput {
  id: ID
  name: String
  description: String
  type: FieldType
  typeKindId: ID
  modifiers: [FieldModifiers!]
  displayAs: [String!]
  hide: Boolean
  autoFocus: Boolean
  readonly: Boolean
  fieldClassifications: [FieldClassificationInput]
  acceptedFieldClassification: FieldClassificationInput
}

enum FieldModifiers {
  NONULL
  LIST
}

enum FieldType {
  ID
  STRING
  INT
  FLOAT
  BOOLEAN
  DATE
  TIME
  DATETIME
  JSON
  KIND
}

type FieldValue {
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: DateTime
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [DateTime]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

input FieldValueInput {
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: DateTime
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [DateTime]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

type File {
  id: ID!
  name: String!

  url: String
  thumbnailUrl: String
  mimeType: String
  size: String!
  progress: String
  status: Int!
}

type FileAddedEvent {
  id: ID!
  name: String!
  url: String
  thumbnailUrl: String
  size: String
  status: Int
  mimeType: String
}

type FileDeletedEvent {
  id: ID!
  name: String!

  text: String
}

type FileUpdatedEvent {
  id: ID!
  name: String!
}

type GeoCoordinate {
  id: ID!
  name: String!
}

type Image {
  detectedFaces: [DetectedFace]
  recognizedFaces: [RecognizedFace]
  people: [Person]

  id: ID!
  name: String!

  url: String
}

type ImageAddedEvent {
  id: ID!
  name: String!
  url: String
}

type ImageDeletedEvent {
  id: ID!
  name: String!

  url: String
}

type ImageUpdatedEvent {
  id: ID!
  name: String!
  url: String
}

type Info {
  id: ID!
  name: String!
  description: String
}

type Instance {
  id: ID!

  name: String
  kindId: ID!
  kind: Kind
  fieldIds: [ID]

  fieldValues: [FieldValue]

  linksFrom: [Link]
  linksTo: [Link]
}

type InstanceAddedEvent {
  id: ID!
  kindId: ID!
}

type InstanceRef {
  id: ID!

  kindId: ID
  kindName: String

  name: String
  url: String

  kind: Kind
  instance: Instance
  innerKind: Kind
}

input InstanceRefInput {
  id: ID
  name: String
  kindId: ID
  kindName: String
  url: String
}

type InstanceSet {
  kindId: ID!
  kind: Kind!
  fieldIds: [ID]

  records: [[FieldValue]]
}

type IpAddress {
  id: ID!
  name: String!
}

scalar JSON

type Kind {
  id: ID!
  name: String!

  serviceId: ID
  description: String
  thumbnailUrl: String
  isPublic: Boolean
  isManaged: Boolean
  schema(
    includeDeleted: Boolean = false
    fieldIds: [ID!]
    fieldNames: [String!]
    fieldKinds: [ID!]
  ): [Field]
  nameField: ID

  relationsFrom: [Relation]
  relationsTo: [Relation]
  linksFrom: [Link]
  linksTo: [Link]
  service: Service
}

type KindAddedEvent {
  id: ID!
}

input KindInput {
  id: ID!
  name: String
  description: String
  thumbnailUrl: String
  isPublic: Boolean
  isManaged: Boolean
  schema: [FieldInput]
}

type KindQuery {
  id: ID!

  kindId: ID!

  fieldFilters: [FieldFilter]

  and: [KindQuery]

  or: [KindQuery]

  fromFieldId: ID
  toFieldId: ID

  kind: Kind!
  fromField: Field
  toField: Field
}

input KindQueryInput {
  kindId: ID
  kindName: String

  fieldFilters: [FieldFilterInput]

  and: [KindQueryInput]

  or: [KindQueryInput]

  fromFieldId: ID
  fromFieldName: String
  toFieldId: ID
  toFieldName: String
  take: Int
}

type KnowledgeGraph {
  id: ID!
  name: String!

  service: Service
  instanceRefs: [InstanceRef!]
  expanded: Boolean
  layout: KnowledgeGraphLayout!
}

type KnowledgeGraphLayout {
  id: ID!
  nodes: [KnowledgeGraphLayoutNode!]
  zoom: Float
  offsetX: Float
  offsetY: Float
}

type KnowledgeGraphLayoutNode {
  id: ID!
  instanceRefId: ID
  x: Float
  y: Float
}

input KnowledgeGraphLayoutNodeInput {
  id: ID!
  instanceRefId: ID!
  x: Float
  y: Float
}

type KnowledgeGraphUpdate {
  instanceRef: InstanceRef!
  layoutNode: KnowledgeGraphLayoutNode!
}

type Latitude {
  id: ID!
  name: String!
}

type Link {
  id: ID!
  relation: Relation!
  fromKind: Kind!
  toKind: Kind!

  name: String
  weight: Float
  fromField: Field
  fromInstance: Instance
  fromOffset: String
  fromSpan: String
  toField: Field
  toInstance: Instance
  toOffset: String
  toSpan: String
}

type LinkAddedEvent {
  id: ID!
  name: String
  relationId: ID
  relationName: String
  weight: Float
  fromKindId: ID
  fromKindName: String
  fromFieldId: ID
  fromFieldName: String
  fromInstanceId: ID
  fromOffset: String
  fromSpan: String
  toKindId: ID
  toKindName: String
  toFieldId: ID
  toFieldName: String
  toInstanceId: ID
  toOffset: String
  toSpan: String
}

type Location {
  id: ID!
  name: String!
}

type Longitude {
  id: ID!
  name: String!
}

type Mutation {
  addService(input: AddServiceInput!): ID
  updateServiceSchema(input: UpdateServiceSchemaInput): Boolean!
  refreshServiceSchema(id: ID!): Boolean!

  addApplication(input: AddApplicationInput!): ID
  updateApplication(input: UpdateApplicationInput!): ID
  addDetectedFaces(input: [DetectedFaceInput!]!): Boolean!
  addRecognizedFaces(input: [RecognizedFaceInput!]!): Boolean!

  addTenant(input: AddTenantInput!): ID
  updateTenant(input: UpdateTenantInput!): ID

  addUser(input: AddUserInput!): ID
  updateUser(input: UpdateUserInput!): ID

  addRole(input: AddRoleInput!): ID
  updateRole(input: UpdateRoleInput!): ID

  addUserTenantRole(input: AddTenantUserRoleInput!): Boolean
  updateUserTenantRole(input: UpdateTenantUserRoleInput!): Boolean

  provisionService(tenantId: ID!): ID
  resetService(
    tenantId: ID!
    areYouSureYouReallyReallyWantToDoThis: Boolean!
  ): Boolean

  addKind(tenantId: ID!, input: AddKindInput!): ID
  updateKind(tenantId: ID!, input: UpdateKindInput!): ID
  deleteKind(tenantId: ID!, kindId: ID!): Boolean
  addFields(tenantId: ID!, input: AddFieldsInput!): ID

  addInstance(tenantId: ID!, input: AddInstanceInput!): ID
  addInstanceSet(tenantId: ID!, input: AddInstanceSetInput!): [ID]
  updateInstance(tenantId: ID!, input: UpdateInstanceInput!): ID
  updateInstances(tenantId: ID!, input: UpdateInstanceSetInput!): [ID]
  deleteInstance(tenantId: ID!, input: DeleteInstanceInput!): ID
  deleteInstanceSet(tenantId: ID!, input: DeleteInstanceSetInput!): [ID]

  addRelation(input: AddRelationInput!): ID
  updateRelation(input: UpdateRelationInput!): ID

  addLink(input: AddLinkInput!): ID
  addLinks(input: [AddLinkInput]!): [ID]
  updateLink(input: UpdateLinkInput!): ID

  setTheme(userId: ID!, theme: Theme!): Boolean!

  duplicateKind(id: ID!, newName: String!): ID!
  duplicateInstance(
    instanceId: ID!
    newName: String!
    kindId: ID
    kindName: String
  ): ID!

  addWorkspace(input: AddWorkspaceInput!): ID
  openWorkspace(userId: ID!, workspaceId: ID!): ID
  closeWorkspace(userId: ID!, workspaceId: ID!): ID
  selectKinds(workspaceId: ID!, instanceRefs: [InstanceRefInput!]!): Boolean!
  activeGraph(workspaceId: ID!, instanceRef: InstanceRefInput!): Boolean!
  updateWorkspaceLayout(input: UpdateWorkspaceLayoutInput!): Boolean!
  resetWorkspaceLayout(id: ID!): Boolean!
  addInstanceRefToWorkspace(
    wsId: ID!
    instanceRef: InstanceRefInput!
  ): InstanceRef!
  addInstanceRefsToWorkspace(
    wsId: ID!
    instanceRefs: [InstanceRefInput!]!
  ): [InstanceRef!]!

  addKnowledgeGraph(input: AddKnowledgeGraphInput!): KnowledgeGraph
  reorderKnowledgeGraphs(input: ReorderKnowledgeGraphsInput!): ID
  addInstanceRefToKnowledgeGraph(
    kgId: ID!
    instanceRef: InstanceRefInput!
  ): KnowledgeGraphUpdate!
  addInstanceRefsToKnowledgeGraph(
    kgId: ID!
    instanceRefs: [InstanceRefInput!]!
  ): [KnowledgeGraphUpdate!]!
  removeInstanceRefFromKnowledgeGraph(kgId: ID!, instanceId: ID!): Boolean!
  removeInstanceRefsFromKnowledgeGraph(kgId: ID!, instanceIds: [ID!]!): Boolean!

  updateKnowledgeGraphLayout(input: UpdateKnowledgeGraphLayoutInput!): Boolean!
  updateModel(kgId: ID!, model: JSON!): Boolean!
  expand(kgId: ID!): Boolean!

  addQueryGraph(input: AddQueryGraphInput!): QueryGraph!
  reorderQueryGraphs(input: ReorderQueryGraphsInput!): ID
  expandQueryGraph(qgId: ID!): Boolean!
  addNodeToQueryGraph(
    qgId: ID!
    node: AddQueryGraphNodeInput!
  ): QueryGraphUpdate!
  addNodesToQueryGraph(
    qgId: ID!
    nodes: [AddQueryGraphNodeInput!]!
  ): [QueryGraphUpdate]!
  removeNodeFromQueryGraph(qgId: ID!, nodeId: ID!): [QueryGraphNode!]!
  removeNodesFromQueryGraph(qgId: ID!, nodeIds: [ID!]!): [QueryGraphNode!]!
  addQueryGraphNodeConnection(
    nodeId: ID!
    connection: QueryGraphNodeConnectionInput!
  ): QueryGraphNode!
  removeQueryGraphNodeConnection(
    nodeId: ID!
    connectionId: ID!
  ): QueryGraphNode!
  addFieldFilterToQueryGraphNode(
    nodeId: ID!
    fieldFilter: QueryGraphFieldFilterInput!
  ): QueryGraphNode!
  addFieldFiltersToQueryGraphNode(
    nodeId: ID!
    fieldFilters: [QueryGraphFieldFilterInput!]!
  ): QueryGraphNode!
  removeFieldFilterFromQueryGraphNode(
    nodeId: ID!
    fieldFilterId: ID!
  ): QueryGraphNode!
  removeFieldFiltersFromQueryGraphNode(
    nodeId: ID!
    fieldFilterIds: [ID!]!
  ): QueryGraphNode!
  addServiceSource(input: AddServiceSourceInput!): ID!
  addDocument(input: AddDocumentInput): ID
  addDocuments(input: [AddDocumentInput!]!): [ID]
  updateDocument(input: UpdateDocumentInput): ID
  updateDocuments(input: [UpdateDocumentInput!]!): [ID]
  deleteDocument(id: ID!): Document
  deleteDocuments(ids: [ID!]!): [Document]
  addFile(input: AddFileInput): ID
  addFiles(input: [AddFileInput!]!): Boolean!
  updateFile(input: UpdateFileInput): ID
  updateFiles(input: [UpdateFileInput!]!): [ID]
  deleteFile(id: ID!): File
  deleteFiles(ids: [ID!]!): [File]
  addImage(input: AddImageInput): ID
  addImages(input: [AddImageInput!]!): [ID]
  updateImage(input: UpdateImageInput): ID
  updateImages(input: [UpdateImageInput!]!): [ID]
  deleteImage(id: ID!): Image
  deleteImages(ids: [ID!]!): [Image]
  addPerson(input: AddPersonInput): ID
  addPersons(input: [AddPersonInput!]!): [ID]
  updatePerson(input: UpdatePersonInput): ID
  updatePersons(input: [UpdatePersonInput!]!): [ID]
  deletePerson(id: ID!): Person
  deletePersons(ids: [ID!]!): [Person]

  addTextElement(input: AddTextElementInput!): ID
  addTextElements(elements: [AddTextElementInput!]!): Boolean

  addEntities(input: AddEntitiesInput!): Boolean
}

type Number {
  id: ID!
  name: String!
  value: Float
}

type Organization {
  id: ID!
  name: String!
}

type Percentage {
  id: ID!
  name: String!
  value: Float
}

type Person {
  images: [Image]

  id: ID!
  name: String!

  givenName: String
  familyName: String
  dateOfBirth: DateTime
}

type PersonAddedEvent {
  id: ID!
  name: String!
}

type PersonDeletedEvent {
  id: ID!
  name: String!

  givenName: String
  familyName: String
  dateOfBirth: DateTime
}

type PersonUpdatedEvent {
  id: ID!
  name: String!

  givenName: String
  familyName: String
  dateOfBirth: DateTime
}

type PhoneNumber {
  id: ID!
  name: String!
}

type PhysicalQuantity {
  id: ID!
  name: String!
  magnitude: String!
  unit: String!
  dimension: String!
}

type Query {
  info: Info!

  service(id: ID!): Service
  allServices: [Service]
  allSystemServices: [Service]
  allNonSystemServices: [Service]

  application(id: ID!): Application
  allApplications: [Application]

  tenant(id: ID!): Tenant
  tenants(ids: [ID!]!): [Tenant]
  allTenants: [Tenant]

  user(id: ID!): User
  users(ids: [ID!]!): [User]
  allUsers: [User]

  role(id: ID!): Role
  roles(ids: [ID!]!): [Role]
  allRoles: [Role]

  kind(tenantId: ID!, id: ID, name: String): Kind
  kinds(tenantId: ID!, ids: [ID!]!): [Kind]
  allKinds(tenantId: ID!, take: Int): [Kind]

  instance(tenantId: ID!, instanceRef: InstanceRefInput!): Instance

  instanceRef(tenantId: ID!, instanceRef: InstanceRefInput!): InstanceRef
  instances(
    tenantId: ID!
    kindId: ID
    kindName: String
    ids: [ID!]!
  ): InstanceSet
  instancesByRef(tenantId: ID!, instanceRefs: [InstanceRefInput!]!): [Instance]
  allInstances(
    tenantId: ID!
    kindId: ID
    kindName: String
    fieldIds: [ID!]
    take: Int
  ): InstanceSet

  query(tenantId: ID!, input: KindQueryInput!): InstanceSet

  relation(tenantId: ID!, id: ID!): Relation
  relations(tenantId: ID!, ids: [ID]!): [Relation]
  allRelations(tenantId: ID!): [Relation]

  link(tenantId: ID!, id: ID!): Link
  links(tenantId: ID!, ids: [ID]!): [Link]

  allLinks(tenantId: ID!, relationId: ID): [Link]

  workspace(id: ID!): Workspace
  allSharedWorkspaces(userId: ID!): [Workspace!]
  allTemplateWorkspaces(userId: ID!): [Workspace!]
  searchUserSpaces(userId: ID!, text: String!): [Workspace!]

  allKindsOfService(tenantId: ID!, serviceId: ID!): [Kind]

  knowledgeGraph(id: ID!): KnowledgeGraph
  knowledgeGraphLayout(id: ID!): KnowledgeGraphLayout

  queryGraph(id: ID!): QueryGraph

  kindDBQuery(kindQuery: KindQueryInput!): InstanceSet
  comment(id: ID!): Comment
  serviceSource(id: ID!): ServiceSource
  allServiceSources: [ServiceSource]

  document(id: ID!): Document
  documents(ids: [ID!]!): [Document]

  file(id: ID!): File
  files(ids: [ID!]!): [File]

  image(id: ID!): Image
  images(ids: [ID!]!): [Image]

  person(id: ID!): Person
  persons(ids: [ID!]!): [Person]

  personsByName(name: String!): [Person]
  personsByDateOfBirth(date: DateTime!): [Person]
}

type QueryGraph {
  id: ID!
  name: String!
  expanded: Boolean
  layout: KnowledgeGraphLayout!
  nodes: [QueryGraphNode!]
}

type QueryGraphFieldFilter {
  id: ID!
  fieldId: ID!
  op: String!
  value: String
}

input QueryGraphFieldFilterInput {
  id: ID
  fieldId: ID!
  op: String!
  value: String
}

type QueryGraphNode {
  id: ID!

  kindId: ID!

  fieldFilters: [QueryGraphFieldFilter!]
  children: [QueryGraphNodeConnection!]

  kind: Kind
}

type QueryGraphNodeConnection {
  id: ID!

  childId: ID!
  childFieldId: ID!

  parentId: ID!
  parentFieldId: ID!
  type: QueryGraphNodeJoinType!
}

input QueryGraphNodeConnectionInput {
  childId: ID!

  childFieldId: ID!

  parentFieldId: ID!

  type: QueryGraphNodeJoinType
}

enum QueryGraphNodeJoinType {
  AND
  OR
}

type QueryGraphUpdate {
  queryNode: QueryGraphNode!
  layoutNode: KnowledgeGraphLayoutNode!
}

type RecognizedFace {
  id: ID!
  name: String!

  personId: ID!
  person: Person!

  detectedFaceId: ID!
  detectedFace: DetectedFace

  recognitionConfidence: Float!
}

input RecognizedFaceInput {
  id: ID
  name: String!
  personId: ID!
  detectedFaceId: ID!
  recognitionConfidence: Float!
}

type Relation {
  id: ID!
  name: String!

  inverseName: String
  description: String
  undirected: Boolean
  weight: Float

  links: [Link]
}

type RelationAddedEvent {
  id: ID!
}

input ReorderKnowledgeGraphsInput {
  workspaceId: ID!
  oldIndex: Int!
  newIndex: Int!
}

input ReorderQueryGraphsInput {
  workspaceId: ID!
  oldIndex: Int!
  newIndex: Int!
}

type Role {
  id: ID!
  name: String!
}

type Service {
  id: ID!
  name: String!
  isSystem: Boolean!
  endpointUrl: String!

  description: String
  subscriptionEndpointUrl: String
  thumbnailUrl: String
  tags: [String]
  status: Int
  lastChecked: DateTime
  instances: [ServiceInstance]

  kinds: [Kind]
  queries: [ServiceQuery]
  mutations: [ServiceMutation]
  subscriptions: [ServiceSubscription]
}

type ServiceInstance {
  id: String!
  dockerServiceName: String!
  hostName: String!
  desiredState: String!
  currentState: String!
}

type ServiceMutation {
  id: ID!
  name: String!
}

input ServiceMutationInput {
  id: ID!
  name: String!
}

type ServiceQuery {
  id: ID!
  name: String!
}

input ServiceQueryInput {
  id: ID!
  name: String!
}

type ServiceSource {
  id: ID!
  name: String
  description: String

  schema: String!
  kinds: [Kind]
}

type ServiceSubscription {
  id: ID!
  name: String!
}

input ServiceSubscriptionInput {
  id: ID!
  name: String!
}

type SocialSecurityNumber {
  id: ID!
  name: String!
}

type Subscription {
  serviceAdded: ID
  faceDetected: FaceDetectedEvent!
  faceRecognized: FaceRecognizedEvent!
  kindAdded: KindAddedEvent!
  instanceAdded: InstanceAddedEvent!
  relationAdded: RelationAddedEvent!
  linkAdded: LinkAddedEvent!
  documentAdded: DocumentAddedEvent!
  documentUpdated: DocumentUpdatedEvent!
  documentDeleted: DocumentDeletedEvent!
  fileAdded: FileAddedEvent!
  fileUpdated: FileUpdatedEvent!
  fileDeleted: FileDeletedEvent!
  imageAdded: ImageAddedEvent!
  imageUpdated: ImageUpdatedEvent!
  imageDeleted: ImageDeletedEvent!
  personAdded: PersonAddedEvent!
  personUpdated: PersonUpdatedEvent!
  personDeleted: PersonDeletedEvent!
}

type Tenant {
  id: ID!
  name: String!
  users: [User]
  services: [Service]
  applications: [Application]
}

type TenantUserRole {
  userId: ID!
  user: User
  tenantId: ID!
  tenant: Tenant
  roles: [Role]
}

type TextElement {
  id: ID!
  name: String!
  docId: ID!
  pageNum: Int
  dir: String
  width: Float
  height: Float
  transform: [Float]
  fontName: String
}

enum Theme {
  DARK
  LIGHT
}

scalar Time

type TimeKind {
  id: ID!
  name: String!
}

input UpdateApplicationInput {
  id: ID!
  name: String!
  thumbnailUrl: String
}

input UpdateDocumentInput {
  id: ID!

  name: String
  text: String
}

input UpdateFileInput {
  id: ID!

  name: String
  url: String
  thumbnailUrl: String
  progress: String
  status: Int
  mimeType: String
}

input UpdateImageInput {
  id: ID!

  name: String
  url: String
}

input UpdateInstanceInput {
  id: ID!
  kindId: ID!
  fieldIds: [ID]!
  fieldValues: [FieldValueInput]!
}

input UpdateInstanceSetInput {
  ids: [ID]
  kindId: ID!
  fieldIds: [ID]!
  records: [[FieldValueInput]]!
}

input UpdateKindInput {
  id: ID!
  name: String
  description: String
  serviceId: ID
  thumbnailUrl: String
  isPublic: Boolean
  nameField: String
  isManaged: Boolean
  schema: [FieldInput]
}

input UpdateKnowledgeGraphLayoutInput {
  id: ID!
  nodes: [KnowledgeGraphLayoutNodeInput!]
  zoom: Float
  offsetX: Float
  offsetY: Float
}

input UpdateLinkInput {
  id: ID!

  name: String
  relationId: ID
  relationName: String
  weight: Float
  fromKindId: ID
  fromKindName: String
  fromFieldId: ID
  fromFieldName: String
  fromInstanceId: ID
  fromOffset: String
  fromSpan: String
  toKindId: ID
  toKindName: String
  toFieldId: ID
  toFieldName: String
  toInstanceId: ID
  toOffset: String
  toSpan: String
}

input UpdatePersonInput {
  id: ID!

  name: String
  givenName: String
  familyName: String
  dateOfBirth: DateTime
}

input UpdateRelationInput {
  id: ID!
  name: String
  inverseName: String
  description: String
  undirected: Boolean
  weight: Float
}

input UpdateRoleInput {
  id: ID!
  name: String
}

input UpdateServiceSchemaInput {
  id: ID!
  status: Int
  lastChecked: DateTime
  kinds: [KindInput]
  queries: [ServiceQueryInput]
  mutations: [ServiceMutationInput]
  subscriptions: [ServiceSubscriptionInput]
}

input UpdateTenantInput {
  id: ID!
  name: String
}

input UpdateTenantUserRoleInput {
  userId: ID!
  tenantId: ID!
  roleIds: [ID!]
}

input UpdateUserInput {
  id: ID!

  name: String
  givenName: String
  familyName: String
  email: String
  picture: String
  theme: Theme
}

input UpdateWorkspaceLayoutInput {
  id: ID!
  explorerOpen: Boolean
  explorerSize: Float
  inventoryOpen: Boolean
  inventorySize: Float
  contextOpen: Boolean
  contextMode: String
  contextSize: Float
  dataVizOpen: Boolean
  dataVizSize: Float
}

type URL {
  id: ID!
  name: String!
}

type User {
  id: ID!
  name: String!
  givenName: String
  familyName: String
  email: String
  picture: String
  tenants: [Tenant]
  tenantUserRoles: [TenantUserRole]
  createdOn: DateTime
  activities: [InstanceRef!]
  recentItems: [InstanceRef!]
  favoriteItems: [InstanceRef!]
  workspaces: [Workspace!]
  applications: [Application!]
  theme: String
  showNewKnowledgeGraphDialog: Boolean
  openWorkspaces: [Workspace!]
  activeWorkspace: Workspace
}

type USState {
  id: ID!
  name: String!
}

type Workspace {
  id: ID!
  name: String!
  thumbnailUrl: String!
  owner: User!
  isPublic: Boolean
  isTemplate: Boolean
  createdOn: DateTime!
  lastOpenedOn: DateTime!
  layout: WorkspaceLayout!

  services: [Service!]
  knowledgeGraphs: [KnowledgeGraph!]
  queryGraphs: [QueryGraph!]
  activeGraph: InstanceRef
  selected: [InstanceRef!]
  instanceRefs: [InstanceRef!]
}

type WorkspaceLayout {
  id: ID!
  explorerOpen: Boolean!
  explorerSize: Float!
  inventoryOpen: Boolean!
  inventorySize: Float!
  contextOpen: Boolean!
  contextMode: String!
  contextSize: Float!
  dataVizOpen: Boolean!
  dataVizSize: Float!
}
